{"version":3,"file":"static/js/467.a2c3267f.chunk.js","mappings":"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","sources":["Api/Api.jsx","components/SearchForm/SearchForm.styled.js","components/SearchForm/SearchForm.jsx","Pages/Movies/Movies.styled.js","Pages/Movies/Movies.jsx","components/ErrorMessage/ErrorMessage.styled.js","components/ErrorMessage/ErorrMessage.jsx","components/MovieList/MovieList.styled.js","components/MovieList/MovieList.jsx","services/url.jsx"],"sourcesContent":["/* key= '003c13e6e40e640c229ce092669f5920' */\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '003c13e6e40e640c229ce092669f5920';\n\nexport async function fetchTrendyFilms() {\n  try {\n    const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function fetchFilmsByName(query) {\n  try {\n    const response = await axios.get(\n      `search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getFilmInformation(filmId) {\n  try {\n    const response = await axios.get(\n      `movie/${filmId}?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getFilmCredits(filmId) {\n  try {\n    const response = await axios.get(\n      `movie/${filmId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data.cast;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getFilmReviews(filmId) {\n  try {\n    const response = await axios.get(\n      `movie/${filmId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  /* overflow: hidden; */\n  width: 700px;\n  display: flex;\n  align-items: center;\n  margin-bottom: 40px;\n`;\n\nexport const Input = styled.input`\n  height: 40px;\n  width: 100%;\n  background-color: #4d2f61;\n  font-size: 20px;\n  padding-left: 15px;\n  border-top-right-radius: 20px;\n  border-bottom-right-radius: 20px;\n  border: none;\n  color: #b29ac2;\n  ::placeholder {\n    color: #b29ac2;\n    font-weight: 600;\n  }\n`;\nexport const SearchButton = styled.button`\n  cursor: pointer;\n  height: 40px;\n  width: auto;\n  outline: none;\n  background-color: #4d2f61;\n  color: #b29ac2;\n  padding: 10px 20px;\n  border-top-left-radius: 20px;\n  border-bottom-left-radius: 20px;\n  border: none;\n  border-right: 1px solid;\n`;\n","import { useState } from 'react';\nimport { Form, Input, SearchButton } from './SearchForm.styled';\n\nexport const SearchForm = ({ onSubmit, toast }) => {\n  const [query, setQuery] = useState('');\n\n  const onChange = e => {\n    const value = e.target.value.trim().toLowerCase();\n    setQuery(value);\n  };\n\n  const reset = () => {\n    setQuery('');\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (!query) {\n      toast('Please write something...');\n      return;\n    }\n\n    onSubmit(query);\n    reset();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <SearchButton type=\"submit\">Search</SearchButton>\n      <Input\n        type=\"text\"\n        autoFocus\n        autoComplete=\"off\"\n        name=\"search\"\n        onChange={onChange}\n        placeholder=\"pop in the title of the movie...\"\n        value={query}\n      />\n    </Form>\n  );\n};\n","const { default: styled } = require('styled-components');\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n`;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchFilmsByName } from 'Api/Api.jsx';\nimport { SearchForm } from 'components/SearchForm/SearchForm';\nimport { MovieList } from 'components/MovieList/MovieList';\nimport { ErrorMessage } from 'components/ErrorMessage/ErorrMessage';\nimport { Loader } from 'components/Loader.jsx';\nimport { Wrapper } from './Movies.styled.js';\n\nconst Movies = () => {\n  const [query, setQuery] = useState('');\n  const [filmList, setFilmList] = useState([]);\n  const [error, setError] = useState(null);\n  const [searchParam, setSearchParam] = useSearchParams();\n  const search = searchParam.get('query') ?? '';\n  const [isLoading, setIsLoading] = useState(false);\n\n  const getQuery = newQuery => {\n    if (newQuery === query) {\n      alert('You already see results for this query ðŸ¥³');\n      return;\n    }\n\n    setQuery(newQuery);\n    setSearchParam(newQuery !== '' ? { query: newQuery } : {});\n  };\n\n  async function createFilmList(newQuery) {\n    try {\n      setFilmList([]);\n      setIsLoading(true);\n\n      const films = await fetchFilmsByName(newQuery);\n      if (!films.length) {\n        setError(false);\n        return;\n      }\n\n      setFilmList(films);\n      setError(true);\n    } catch {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    if (search) {\n      setQuery(search);\n    }\n    if (!query) {\n      return;\n    }\n    createFilmList(query);\n    // eslint-disable-next-line\n  }, [query]);\n\n  return (\n    <Wrapper>\n      <SearchForm onSubmit={getQuery} />\n      {isLoading && <Loader />}\n      {error === false ? (\n        <ErrorMessage text={'Sorry, no results for your search'} />\n      ) : (\n        <MovieList list={filmList} />\n      )}\n    </Wrapper>\n  );\n};\n\nexport default Movies;\n","import styled from 'styled-components';\n\nexport const Error = styled.p`\n  font-size: 30px;\n  font-weight: 400;\n`;\n","import { Error } from './ErrorMessage.styled';\n\nexport const ErrorMessage = ({ text }) => <Error>{text}</Error>;\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const MovieItem = styled.li`\n  position: relative;\n  overflow: hidden;\n  border-radius: 20px;\n\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const Poster = styled.img`\n  width: 100%;\n  height: 360px;\n`;\n","import { useState, useEffect } from 'react';\nimport { NavLink, useLocation } from 'react-router-dom';\nimport { fetchTrendyFilms } from 'Api/Api';\nimport { imgUrl } from 'services/url';\nimport poster from '../../img/image-not-found.jpg';\n\nimport { List, MovieItem, Poster } from './MovieList.styled';\n\nexport const MovieList = ({ list }) => {\n  const [movies, setMovies] = useState([]);\n  const location = useLocation();\n  const currentUrl = location.pathname === '/' ? 'movies/' : '';\n\n  async function createMovieList() {\n    const trendyMovies = await fetchTrendyFilms();\n\n    if (!trendyMovies) {\n      return;\n    }\n    setMovies(trendyMovies);\n  }\n\n  useEffect(() => {\n    if (list) {\n      setMovies(list);\n      return;\n    }\n    createMovieList();\n  }, [list]);\n\n  return (\n    <div>\n      <List>\n        {movies.map(\n          ({ id, poster_path, title, release_date, vote_average }) => (\n            <MovieItem key={id}>\n              <NavLink to={`${currentUrl}${id}`} state={{ from: location }}>\n                <Poster\n                  src={poster_path ? imgUrl + poster_path : poster}\n                  alt={title}\n                ></Poster>\n              </NavLink>\n            </MovieItem>\n          )\n        )}\n      </List>\n    </div>\n  );\n};\n","export const imgUrl = 'https://image.tmdb.org/t/p/w500';\n"],"names":["axios","API_KEY","fetchTrendyFilms","response","data","results","console","error","fetchFilmsByName","query","getFilmInformation","filmId","getFilmCredits","cast","getFilmReviews","Form","styled","Input","SearchButton","SearchForm","onSubmit","toast","useState","setQuery","e","preventDefault","type","autoFocus","autoComplete","name","onChange","value","target","trim","toLowerCase","placeholder","Wrapper","require","default","div","filmList","setFilmList","setError","useSearchParams","searchParam","setSearchParam","search","get","isLoading","setIsLoading","newQuery","films","length","useEffect","createFilmList","alert","Loader","text","MovieList","list","Error","ErrorMessage","List","MovieItem","Poster","movies","setMovies","location","useLocation","currentUrl","pathname","trendyMovies","createMovieList","map","id","poster_path","title","release_date","vote_average","to","state","from","src","imgUrl","poster","alt"],"sourceRoot":""}